<#@ include file="../../TemplateLibrary.txt" #>
using System;

namespace Mosa.UnitTests.Primitive
{
<# foreach (bool isSigned in new bool[2] {false, true}) {
	foreach (KeyValuePair<string, string> numberT in isSigned ? NegativeIntegers : PositiveIntegers) {
		string enumType = "Enum" + numberT.Value;
		string valueType = numberT.Key;
#>	enum <#= enumType #>Type : <#= valueType #>
	{
<# if (isSigned) {
#>		Negative51 = -51,
		Negative50,
		Negative49,
<# } #>		Positive49 = 49,
		Positive50,
		Positive51
	}

	public static class <#= enumType #>
	{
<#		List<KeyValuePair<int, string>> numbers = new List<KeyValuePair<int, string>>();
		numbers.Add(new KeyValuePair<int, string>(50, "Positive"));
		if (isSigned) numbers.Add(new KeyValuePair<int, string>(-50, "Negative"));
		foreach (KeyValuePair<int, string> number in numbers) {
			int value = number.Key;
			string enumElement = enumType + "Type." + number.Value + Math.Abs(value).ToString();
			string enumElementMinusOne = enumType + "." + number.Value + Math.Abs(value-1).ToString();
			string enumElementPlusOne = enumType + "." + number.Value + Math.Abs(value+1).ToString();

#>
		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Conversion()
		{
			return (<#= valueType #>)<#= enumElement #>;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>PlusOne1()
		{
			return (<#= valueType #>)(<#= enumElement #> + 1);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>PlusOne2()
		{
			return (<#= valueType #>)(<#= enumElement #> + 2);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>MinusOne1()
		{
			return (<#= valueType #>)(<#= enumElement #> - 1);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>MinusOne2()
		{
			return (<#= valueType #>)(<#= enumElement #> - 2);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Shl()
		{
			return (<#= valueType #>)<#= enumElement #> << 1;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Shr()
		{
			return (<#= valueType #>)<#= enumElement #> >> 1;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Mul2()
		{
			return  (<#= valueType #>)<#= enumElement #> * 2;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Div2()
		{
			return (<#= valueType #>)<#= enumElement #> / 2;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Rem2()
		{
			return (<#= valueType #>)<#= enumElement #> % 2;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>AssignPlusOne()
		{
			var e = <#= enumElement #>;
			e += 1;
			return (<#= valueType #>)e;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>AssignMinusOne()
		{
			var e = <#= enumElement #>;
			e -= 1;
			return (<#= valueType #>)e;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Preincrement()
		{
			var e = <#= enumElement #>;
			++e;
			return (<#= valueType #>)(e);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Predecrement()
		{
			var e = <#= enumElement #>;
			--e;
			return (<#= valueType #>)(e);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Postincrement()
		{
			var e = <#= enumElement #>;
			e++;
			return (<#= valueType #>)(e);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Postdecrement()
		{
			var e = <#= enumElement #>;
			e--;
			return (<#= valueType #>)(e);
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>And()
		{
			return (<#= valueType #>)<#= enumElement #> & 0xF;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>Or()
		{
			return (<#= valueType #>)<#= enumElement #> | 1;
		}

		[MosaUnitTest]
		public static <#= valueType #> <#= number.Value #>XOr()
		{
			return (<#= valueType #>)<#= enumElement #> ^ 1;
		}

<#			foreach (KeyValuePair<string, string> comparison in Comparisons)
		{
#>		private static bool Internal<#= number.Value #><#= comparison.Value #>(<#= enumType #>Type e, <#= valueType #> v) {
			return (<#= valueType #>)e <#= comparison.Key #> v;
		}

		[MosaUnitTest]
		public static bool <#= number.Value #><#= comparison.Value #>1()
		{
			return Internal<#= number.Value #><#= comparison.Value #>(<#= enumElement #>, <#= value #>);
		}

		[MosaUnitTest]
		public static bool <#= number.Value #><#= comparison.Value #>2()
		{
			return Internal<#= number.Value #><#= comparison.Value #>(<#= enumElement #>, <#= value+1 #>);
		}

		[MosaUnitTest]
		public static bool <#= number.Value #><#= comparison.Value #>3()
		{
			return Internal<#= number.Value #><#= comparison.Value #>(<#= enumElement #>, <#= value-1 #>);
		}

<#			}
		}
#>	}

<#	}
}
#>}
