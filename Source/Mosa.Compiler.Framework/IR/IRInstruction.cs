// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

namespace Mosa.Compiler.Framework.IR
{
	/// <summary>
	/// IR Instructions
	/// </summary>
	public static class IRInstruction
	{
		public static readonly AddFloatR4 AddFloatR4 = new AddFloatR4();
		public static readonly AddFloatR8 AddFloatR8 = new AddFloatR8();
		public static readonly AddressOf AddressOf = new AddressOf();
		public static readonly Add32 Add32 = new Add32();
		public static readonly Add64 Add64 = new Add64();
		public static readonly AddCarryOut32 AddCarryOut32 = new AddCarryOut32();
		public static readonly AddWithCarry32 AddWithCarry32 = new AddWithCarry32();
		public static readonly ArithShiftRight32 ArithShiftRight32 = new ArithShiftRight32();
		public static readonly ArithShiftRight64 ArithShiftRight64 = new ArithShiftRight64();
		public static readonly BlockEnd BlockEnd = new BlockEnd();
		public static readonly BlockStart BlockStart = new BlockStart();
		public static readonly Break Break = new Break();
		public static readonly Call Call = new Call();
		public static readonly CallDirect CallDirect = new CallDirect();
		public static readonly CallDynamic CallDynamic = new CallDynamic();
		public static readonly CallInterface CallInterface = new CallInterface();
		public static readonly CallStatic CallStatic = new CallStatic();
		public static readonly CallVirtual CallVirtual = new CallVirtual();
		public static readonly CompareFloatR4 CompareFloatR4 = new CompareFloatR4();
		public static readonly CompareFloatR8 CompareFloatR8 = new CompareFloatR8();
		public static readonly CompareInt32x32 CompareInt32x32 = new CompareInt32x32();
		public static readonly CompareInt64x32 CompareInt64x32 = new CompareInt64x32();
		public static readonly CompareInt64x64 CompareInt64x64 = new CompareInt64x64();
		public static readonly CompareIntBranch32 CompareIntBranch32 = new CompareIntBranch32();
		public static readonly CompareIntBranch64 CompareIntBranch64 = new CompareIntBranch64();
		public static readonly ConvertFloatR4ToFloatR8 ConvertFloatR4ToFloatR8 = new ConvertFloatR4ToFloatR8();
		public static readonly ConvertFloatR4ToInt32 ConvertFloatR4ToInt32 = new ConvertFloatR4ToInt32();
		public static readonly ConvertFloatR4ToInt64 ConvertFloatR4ToInt64 = new ConvertFloatR4ToInt64();
		public static readonly ConvertFloatR8ToFloatR4 ConvertFloatR8ToFloatR4 = new ConvertFloatR8ToFloatR4();
		public static readonly ConvertFloatR8ToInt32 ConvertFloatR8ToInt32 = new ConvertFloatR8ToInt32();
		public static readonly ConvertFloatR8ToInt64 ConvertFloatR8ToInt64 = new ConvertFloatR8ToInt64();
		public static readonly ConvertInt32ToFloatR4 ConvertInt32ToFloatR4 = new ConvertInt32ToFloatR4();
		public static readonly ConvertInt64ToFloatR4 ConvertInt64ToFloatR4 = new ConvertInt64ToFloatR4();
		public static readonly ConvertInt32ToFloatR8 ConvertInt32ToFloatR8 = new ConvertInt32ToFloatR8();
		public static readonly ConvertInt64ToFloatR8 ConvertInt64ToFloatR8 = new ConvertInt64ToFloatR8();
		public static readonly DivFloatR4 DivFloatR4 = new DivFloatR4();
		public static readonly DivFloatR8 DivFloatR8 = new DivFloatR8();
		public static readonly DivSigned32 DivSigned32 = new DivSigned32();
		public static readonly DivSigned64 DivSigned64 = new DivSigned64();
		public static readonly DivUnsigned32 DivUnsigned32 = new DivUnsigned32();
		public static readonly DivUnsigned64 DivUnsigned64 = new DivUnsigned64();
		public static readonly Epilogue Epilogue = new Epilogue();
		public static readonly ExceptionEnd ExceptionEnd = new ExceptionEnd();
		public static readonly ExceptionStart ExceptionStart = new ExceptionStart();
		public static readonly FilterEnd FilterEnd = new FilterEnd();
		public static readonly FilterStart FilterStart = new FilterStart();
		public static readonly FinallyEnd FinallyEnd = new FinallyEnd();
		public static readonly FinallyStart FinallyStart = new FinallyStart();
		public static readonly Flow Flow = new Flow();
		public static readonly Gen Gen = new Gen();
		public static readonly GotoLeaveTarget GotoLeaveTarget = new GotoLeaveTarget();
		public static readonly IntrinsicMethodCall IntrinsicMethodCall = new IntrinsicMethodCall();
		public static readonly IsInstanceOfType IsInstanceOfType = new IsInstanceOfType();
		public static readonly IsInstanceOfInterfaceType IsInstanceOfInterfaceType = new IsInstanceOfInterfaceType();
		public static readonly Jmp Jmp = new Jmp();
		public static readonly Kill Kill = new Kill();
		public static readonly KillAll KillAll = new KillAll();
		public static readonly KillAllExcept KillAllExcept = new KillAllExcept();
		public static readonly LoadConstant32 LoadConstant32 = new LoadConstant32();
		public static readonly LoadConstant64 LoadConstant64 = new LoadConstant64();
		public static readonly LoadCompound LoadCompound = new LoadCompound();
		public static readonly LoadFloatR4 LoadFloatR4 = new LoadFloatR4();
		public static readonly LoadFloatR8 LoadFloatR8 = new LoadFloatR8();
		public static readonly LoadInt32 LoadInt32 = new LoadInt32();
		public static readonly LoadInt64 LoadInt64 = new LoadInt64();
		public static readonly LoadSignExtend8x32 LoadSignExtend8x32 = new LoadSignExtend8x32();
		public static readonly LoadSignExtend16x32 LoadSignExtend16x32 = new LoadSignExtend16x32();
		public static readonly LoadSignExtend8x64 LoadSignExtend8x64 = new LoadSignExtend8x64();
		public static readonly LoadSignExtend16x64 LoadSignExtend16x64 = new LoadSignExtend16x64();
		public static readonly LoadSignExtend32x64 LoadSignExtend32x64 = new LoadSignExtend32x64();
		public static readonly LoadZeroExtend8x32 LoadZeroExtend8x32 = new LoadZeroExtend8x32();
		public static readonly LoadZeroExtend16x32 LoadZeroExtend16x32 = new LoadZeroExtend16x32();
		public static readonly LoadZeroExtend8x64 LoadZeroExtend8x64 = new LoadZeroExtend8x64();
		public static readonly LoadZeroExtend16x64 LoadZeroExtend16x64 = new LoadZeroExtend16x64();
		public static readonly LoadZeroExtend32x64 LoadZeroExtend32x64 = new LoadZeroExtend32x64();
		public static readonly LoadParamCompound LoadParamCompound = new LoadParamCompound();
		public static readonly LoadParamFloatR4 LoadParamFloatR4 = new LoadParamFloatR4();
		public static readonly LoadParamFloatR8 LoadParamFloatR8 = new LoadParamFloatR8();
		public static readonly LoadParamInt32 LoadParamInt32 = new LoadParamInt32();
		public static readonly LoadParamInt64 LoadParamInt64 = new LoadParamInt64();
		public static readonly LoadParamSignExtend8x32 LoadParamSignExtend8x32 = new LoadParamSignExtend8x32();
		public static readonly LoadParamSignExtend16x32 LoadParamSignExtend16x32 = new LoadParamSignExtend16x32();
		public static readonly LoadParamSignExtend8x64 LoadParamSignExtend8x64 = new LoadParamSignExtend8x64();
		public static readonly LoadParamSignExtend16x64 LoadParamSignExtend16x64 = new LoadParamSignExtend16x64();
		public static readonly LoadParamSignExtend32x64 LoadParamSignExtend32x64 = new LoadParamSignExtend32x64();
		public static readonly LoadParamZeroExtend8x32 LoadParamZeroExtend8x32 = new LoadParamZeroExtend8x32();
		public static readonly LoadParamZeroExtend16x32 LoadParamZeroExtend16x32 = new LoadParamZeroExtend16x32();
		public static readonly LoadParamZeroExtend8x64 LoadParamZeroExtend8x64 = new LoadParamZeroExtend8x64();
		public static readonly LoadParamZeroExtend16x64 LoadParamZeroExtend16x64 = new LoadParamZeroExtend16x64();
		public static readonly LoadParamZeroExtend32x64 LoadParamZeroExtend32x64 = new LoadParamZeroExtend32x64();
		public static readonly LogicalAnd32 LogicalAnd32 = new LogicalAnd32();
		public static readonly LogicalAnd64 LogicalAnd64 = new LogicalAnd64();
		public static readonly LogicalNot32 LogicalNot32 = new LogicalNot32();
		public static readonly LogicalNot64 LogicalNot64 = new LogicalNot64();
		public static readonly LogicalOr32 LogicalOr32 = new LogicalOr32();
		public static readonly LogicalOr64 LogicalOr64 = new LogicalOr64();
		public static readonly LogicalXor32 LogicalXor32 = new LogicalXor32();
		public static readonly LogicalXor64 LogicalXor64 = new LogicalXor64();
		public static readonly MemorySet MemorySet = new MemorySet();
		public static readonly MoveCompound MoveCompound = new MoveCompound();
		public static readonly MoveFloatR4 MoveFloatR4 = new MoveFloatR4();
		public static readonly MoveFloatR8 MoveFloatR8 = new MoveFloatR8();
		public static readonly SignExtend8x32 SignExtend8x32 = new SignExtend8x32();
		public static readonly SignExtend16x32 SignExtend16x32 = new SignExtend16x32();
		public static readonly SignExtend8x64 SignExtend8x64 = new SignExtend8x64();
		public static readonly SignExtend16x64 SignExtend16x64 = new SignExtend16x64();
		public static readonly SignExtend32x64 SignExtend32x64 = new SignExtend32x64();
		public static readonly ZeroExtend8x32 ZeroExtend8x32 = new ZeroExtend8x32();
		public static readonly ZeroExtend16x32 ZeroExtend16x32 = new ZeroExtend16x32();
		public static readonly ZeroExtend8x64 ZeroExtend8x64 = new ZeroExtend8x64();
		public static readonly ZeroExtend16x64 ZeroExtend16x64 = new ZeroExtend16x64();
		public static readonly ZeroExtend32x64 ZeroExtend32x64 = new ZeroExtend32x64();
		public static readonly MoveInt32 MoveInt32 = new MoveInt32();
		public static readonly MoveInt64 MoveInt64 = new MoveInt64();
		public static readonly MulFloatR4 MulFloatR4 = new MulFloatR4();
		public static readonly MulFloatR8 MulFloatR8 = new MulFloatR8();
		public static readonly MulSigned32 MulSigned32 = new MulSigned32();
		public static readonly MulSigned64 MulSigned64 = new MulSigned64();
		public static readonly MulUnsigned64 MulUnsigned64 = new MulUnsigned64();
		public static readonly MulUnsigned32 MulUnsigned32 = new MulUnsigned32();
		public static readonly NewArray NewArray = new NewArray();
		public static readonly NewObject NewObject = new NewObject();
		public static readonly NewString NewString = new NewString();
		public static readonly Nop Nop = new Nop();
		public static readonly Phi Phi = new Phi();
		public static readonly Prologue Prologue = new Prologue();
		public static readonly RemFloatR4 RemFloatR4 = new RemFloatR4();
		public static readonly RemFloatR8 RemFloatR8 = new RemFloatR8();
		public static readonly RemSigned32 RemSigned32 = new RemSigned32();
		public static readonly RemSigned64 RemSigned64 = new RemSigned64();
		public static readonly RemUnsigned32 RemUnsigned32 = new RemUnsigned32();
		public static readonly RemUnsigned64 RemUnsigned64 = new RemUnsigned64();
		public static readonly SetReturnR4 SetReturnR4 = new SetReturnR4();
		public static readonly SetReturnR8 SetReturnR8 = new SetReturnR8();
		public static readonly SetReturn32 SetReturn32 = new SetReturn32();
		public static readonly SetReturn64 SetReturn64 = new SetReturn64();
		public static readonly SetReturnCompound SetReturnCompound = new SetReturnCompound();
		public static readonly SetLeaveTarget SetLeaveTarget = new SetLeaveTarget();
		public static readonly ShiftLeft32 ShiftLeft32 = new ShiftLeft32();
		public static readonly ShiftLeft64 ShiftLeft64 = new ShiftLeft64();
		public static readonly ShiftRight32 ShiftRight32 = new ShiftRight32();
		public static readonly ShiftRight64 ShiftRight64 = new ShiftRight64();
		public static readonly StableObjectTracking StableObjectTracking = new StableObjectTracking();
		public static readonly StoreCompound StoreCompound = new StoreCompound();
		public static readonly StoreFloatR4 StoreFloatR4 = new StoreFloatR4();
		public static readonly StoreFloatR8 StoreFloatR8 = new StoreFloatR8();
		public static readonly StoreInt8 StoreInt8 = new StoreInt8();
		public static readonly StoreInt16 StoreInt16 = new StoreInt16();
		public static readonly StoreInt32 StoreInt32 = new StoreInt32();
		public static readonly StoreInt64 StoreInt64 = new StoreInt64();
		public static readonly StoreParamCompound StoreParamCompound = new StoreParamCompound();
		public static readonly StoreParamFloatR4 StoreParamFloatR4 = new StoreParamFloatR4();
		public static readonly StoreParamFloatR8 StoreParamFloatR8 = new StoreParamFloatR8();
		public static readonly StoreParamInt8 StoreParamInt8 = new StoreParamInt8();
		public static readonly StoreParamInt16 StoreParamInt16 = new StoreParamInt16();
		public static readonly StoreParamInt32 StoreParamInt32 = new StoreParamInt32();
		public static readonly StoreParamInt64 StoreParamInt64 = new StoreParamInt64();
		public static readonly SubFloatR4 SubFloatR4 = new SubFloatR4();
		public static readonly SubFloatR8 SubFloatR8 = new SubFloatR8();
		public static readonly Sub32 Sub32 = new Sub32();
		public static readonly Sub64 Sub64 = new Sub64();
		public static readonly SubCarryOut32 SubCarryOut32 = new SubCarryOut32();
		public static readonly SubWithCarry32 SubWithCarry32 = new SubWithCarry32();
		public static readonly Switch Switch = new Switch();
		public static readonly Throw Throw = new Throw();
		public static readonly Truncation64x32 Truncation64x32 = new Truncation64x32();
		public static readonly TryEnd TryEnd = new TryEnd();
		public static readonly TryStart TryStart = new TryStart();
		public static readonly UnstableObjectTracking UnstableObjectTracking = new UnstableObjectTracking();
		public static readonly Rethrow Rethrow = new Rethrow();
		public static readonly GetVirtualFunctionPtr GetVirtualFunctionPtr = new GetVirtualFunctionPtr();
		public static readonly MemoryCopy MemoryCopy = new MemoryCopy();
		public static readonly Box Box = new Box();
		public static readonly Box32 Box32 = new Box32();
		public static readonly Box64 Box64 = new Box64();
		public static readonly BoxR4 BoxR4 = new BoxR4();
		public static readonly BoxR8 BoxR8 = new BoxR8();
		public static readonly Unbox Unbox = new Unbox();
		public static readonly Unbox32 Unbox32 = new Unbox32();
		public static readonly Unbox64 Unbox64 = new Unbox64();
		public static readonly To64 To64 = new To64();
		public static readonly GetLow64 GetLow64 = new GetLow64();
		public static readonly GetHigh64 GetHigh64 = new GetHigh64();
		public static readonly IfThenElse32 IfThenElse32 = new IfThenElse32();
		public static readonly IfThenElse64 IfThenElse64 = new IfThenElse64();
	}
}
