// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using System.Collections.Generic;

namespace Mosa.Compiler.Framework.Transform.Manual
{
	/// <summary>
	/// Transformations
	/// </summary>
	public static class ManualTransforms
	{
		public static readonly List<BaseTransformation> List = new List<BaseTransformation>
		{
			new IR.ConstantMove.Compare32x32(),
			new IR.ConstantMove.Compare32x64(),
			new IR.ConstantMove.Compare64x32(),
			new IR.ConstantMove.Compare64x64(),

			new IR.ConstantMove.Branch32(),
			new IR.ConstantMove.Branch64(),

			new IR.ConstantFolding.Compare32x32(),
			new IR.ConstantFolding.Compare32x64(),
			new IR.ConstantFolding.Compare64x32(),
			new IR.ConstantFolding.Compare64x64(),

			new IR.ConstantFolding.Branch32(),
			new IR.ConstantFolding.Branch64(),

			new Transform.IR.Special.CodeInDeadBlock(),
			new Transform.IR.Special.Deadcode(),
			new Transform.IR.Special.GetLow32From64(),

			new IR.Simplification.AddCarryOut32CarryNotUsed(),
			new IR.Simplification.AddCarryOut64CarryNotUsed(),
			new IR.Simplification.SubCarryOut32CarryNotUsed(),
			new IR.Simplification.SubCarryOut64CarryNotUsed(),

			new IR.Simplification.Compare32x32Same(),
			new IR.Simplification.Compare32x64Same(),
			new IR.Simplification.Compare64x32Same(),
			new IR.Simplification.Compare64x64Same(),

			new IR.Simplification.Compare32x32NotSame(),
			new IR.Simplification.Compare32x64NotSame(),
			new IR.Simplification.Compare64x32NotSame(),
			new IR.Simplification.Compare64x64NotSame(),

			new Transform.IR.Special.Move32Propagate(),
			new Transform.IR.Special.Move32PropagateConstant(),
			new Transform.IR.Special.Move64Propagate(),
			new Transform.IR.Special.Move64PropagateConstant(),
			new Transform.IR.Special.MoveR4Propagate(),
			new Transform.IR.Special.MoveR8Propagate(),

			new IR.Special.Phi32Propagate(),
			new IR.Special.Phi64Propagate(),
			new IR.Special.PhiR4Propagate(),
			new IR.Special.PhiR8Propagate(),

			new IR.Special.Phi32Dead(),
			new IR.Special.Phi64Dead(),
			new IR.Special.PhiR4Dead(),
			new IR.Special.PhiR8Dead(),

			new IR.Special.Phi32Update(),
			new IR.Special.Phi64Update(),
			new IR.Special.PhiR4Update(),
			new IR.Special.PhiR8Update(),

			new IR.Simplification.Branch32OnlyOneExit(),
			new IR.Simplification.Branch64OnlyOneExit(),

			new IR.Rewrite.Branch32(),
			new IR.Rewrite.Branch64(),

			new IR.Rewrite.Branch32Object(),
			new IR.Rewrite.Branch64Object(),

			new IR.Special.MoveCompoundPropagate(),

			new IR.Rewrite.Branch32From64(),
			new IR.Rewrite.Branch64From32(),

			new Transform.IR.Special.MoveObjectPropagate(),
			new Transform.IR.Special.MoveObjectPropagateConstant(),

			new IR.Rewrite.Compare32x32Combine32x32(),
			new IR.Rewrite.Compare32x32Combine64x32(),
			new IR.Rewrite.Compare32x32Combine32x64(),
			new IR.Rewrite.Compare64x64Combine32x32(),
			new IR.Rewrite.Compare64x64Combine64x32(),
			new IR.Rewrite.Compare64x64Combine64x64(),

			new IR.Rewrite.Branch32Combine32x32(),
			new IR.Rewrite.Branch32Combine32x64(),
			new IR.Rewrite.Branch32Combine64x32(),
			new IR.Rewrite.Branch32Combine64x64(),
			new IR.Rewrite.Branch64Combine32x32(),
			new IR.Rewrite.Branch64Combine32x64(),
			new IR.Rewrite.Branch64Combine64x32(),
			new IR.Rewrite.Branch64Combine64x64(),

			new IR.Simplification.Compare64x32SameHigh(),
			new  IR.Simplification.Compare64x32SameLow(),

			// LowerTo32
			new IR.LowerTo32.Add64(),
			new IR.LowerTo32.And64(),
			new IR.LowerTo32.Branch64(),
			new IR.LowerTo32.Compare64x32EqualOrNotEqual(),
			new IR.LowerTo32.Compare64x32Rest(),
			new IR.LowerTo32.Compare64x32RestInSSA(),
			new IR.LowerTo32.Compare64x64EqualOrNotEqual(),
			new IR.LowerTo32.Compare64x64Rest(),
			new IR.LowerTo32.Compare64x64RestInSSA(),

			//IR.LowerTo32.Compare64x32UnsignedGreater(),
			new IR.LowerTo32.Load64(),
			new IR.LowerTo32.LoadParam64(),
			new IR.LowerTo32.LoadParamSignExtend16x64(),
			new IR.LowerTo32.LoadParamSignExtend32x64(),
			new IR.LowerTo32.LoadParamSignExtend8x64(),
			new IR.LowerTo32.LoadParamZeroExtend16x64(),
			new IR.LowerTo32.LoadParamZeroExtend32x64(),
			new IR.LowerTo32.LoadParamZeroExtend8x64(),
			new IR.LowerTo32.Not64(),
			new IR.LowerTo32.Or64(),
			new IR.LowerTo32.SignExtend16x64(),
			new IR.LowerTo32.SignExtend32x64(),
			new IR.LowerTo32.SignExtend8x64(),
			new IR.LowerTo32.Store64(),
			new IR.LowerTo32.StoreParam64(),
			new IR.LowerTo32.Sub64(),
			new IR.LowerTo32.Truncate64x32(),
			new IR.LowerTo32.Xor64(),
			new IR.LowerTo32.ZeroExtend16x64(),
			new IR.LowerTo32.ZeroExtend32x64(),

			new IR.LowerTo32.Move64(),
		};
	}
}
