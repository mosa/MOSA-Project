// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using Mosa.Compiler.Common;

namespace Mosa.Compiler.Framework.Transforms.Optimizations.Manual.Simplification;

// DRAFT - Need ability to handle 128bit multiple

/// <summary>
/// DivUnsignedMagicNumber64
/// </summary>
[Transform("IR.Optimizations.Manual.Simplification")]
public sealed class DivUnsignedMagicNumber64 : BaseTransform
{
	public DivUnsignedMagicNumber64() : base(IRInstruction.DivUnsigned64, TransformType.Auto | TransformType.Optimization)
	{
	}

	public override int Priority => 100;

	public override bool Match(Context context, TransformContext transform)
	{
		if (!IsResolvedConstant(context.Operand2))
			return false;

		if (IsResolvedConstant(context.Operand1))
			return false;

		if (context.Operand2.ConstantUnsigned64 <= 2)
			return false;

		if (IsPowerOfTwo32(context.Operand2))
			return false;

		return true;
	}

	public override void Transform(Context context, TransformContext transform)
	{
		var result = context.Result;

		var operand1 = context.Operand1;
		var c = context.Operand2.ConstantUnsigned32;

		var magic = DivisionMagicNumber.GetMagicNumber(c);

		var v1 = transform.VirtualRegisters.Allocate64();
		var v2 = transform.VirtualRegisters.Allocate64();
		var v4 = transform.VirtualRegisters.Allocate32();

		context.SetInstruction(IRInstruction.To64, v1, operand1, Operand.Constant32_0);
		context.AppendInstruction(IRInstruction.MulUnsigned64, v2, v1, Operand.CreateConstant64(magic.M));
		context.AppendInstruction(IRInstruction.GetHigh32, v4, v2);

		if (!magic.a)
		{
			context.AppendInstruction(IRInstruction.ShiftRight32, result, v4, Operand.CreateConstant32(magic.s));
		}
		else
		{
			var v5 = transform.VirtualRegisters.Allocate32();
			var v6 = transform.VirtualRegisters.Allocate32();
			var v7 = transform.VirtualRegisters.Allocate32();

			context.AppendInstruction(IRInstruction.Sub32, v5, operand1, v4);
			context.AppendInstruction(IRInstruction.ShiftRight32, v6, v5, Operand.Constant32_1);
			context.AppendInstruction(IRInstruction.Add32, v7, v6, v4);
			context.AppendInstruction(IRInstruction.ShiftRight32, result, v7, Operand.CreateConstant32(magic.s - 1));
		}
	}
}
