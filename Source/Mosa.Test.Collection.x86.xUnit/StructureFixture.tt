<#@ include file="../TemplateLibrary.txt" #>
using Xunit;
using Xunit.Extensions;

namespace Mosa.Test.Collection.x86.xUnit
{
	public class StructureFixture : X86TestFixture
	{
<# foreach (KeyValuePair<string, string> number in NumbersWithChar) {
	var shortName = number.Value;
	var miniName = (shortName.EndsWith("4") || shortName.EndsWith("8")) ? shortName+"Mini" : shortName;
	bool pending = shortName == "I1" || shortName == "I2"; // FIXME: 3-way tests sbyte/short are disabled due to excess number of failures
#>
		[Theory]
		[PropertyData("<#= shortName #>")]
		public void StructTestSet1<#= shortName #>(<#= number.Key #> one)
		{
			Assert.Equal(Mosa.Test.Collection.StructTests.StructTestSet1<#= shortName #>(one), Run<bool>("Mosa.Test.Collection.StructTests.StructTestSet1<#= shortName #>", one));
		}
		
<#	if (!pending)
	{
#>		[Theory]
		[PropertyData("<#= miniName + miniName + miniName #>")]
		public void StructTestSet3<#= shortName #>(<#= number.Key #> one, <#= number.Key #> two, <#= number.Key #> three)
		{
			Assert.Equal(Mosa.Test.Collection.StructTests.StructTestSet3<#= shortName #>(one, two, three), Run<bool>("Mosa.Test.Collection.StructTests.StructTestSet3<#= shortName #>", one, two, three));
		}
<#	}
}
#>	}
}
