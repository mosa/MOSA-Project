// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using Mosa.Compiler.Framework;
using Mosa.Compiler.Framework.Transform;
using Mosa.Platform.Intel;
using System.Diagnostics;

namespace Mosa.Platform.x86.Transform.Manual.Stack
{
	/// <summary>
	/// Add32
	/// </summary>
	public sealed class Add32 : BaseTransformation
	{
		public Add32() : base(X86.Add32)
		{
		}

		public override bool Match(Context context, TransformContext transformContext)
		{
			if (!context.Operand1.IsCPURegister)
				return false;

			if (context.Operand1.Register != GeneralPurposeRegister.ESP)
				return false;

			if (!context.Operand2.IsConstant)
				return false;

			var next = GetNextNode(context);

			if (next == null)
				return false;

			if (next.Instruction != X86.Sub32)
				return false;

			if (context.Operand1.Register != GeneralPurposeRegister.ESP)
				return false;

			if (!next.Operand2.IsConstant)
				return false;

			return true;
		}

		public override void Transform(Context context, TransformContext transformContext)
		{
			var next = GetNextNode(context);

			var value1 = context.Operand2.ConstantSigned32;
			var value2 = next.Operand2.ConstantSigned32;

			var value = value1 - value2;

			next.SetNop();

			if (value > 0)
			{
				context.SetInstruction(X86.Add32, context.Result, context.Operand1, transformContext.CreateConstant(value));
			}
			else if (value < 0)
			{
				context.SetInstruction(X86.Sub32, context.Result, context.Operand1, transformContext.CreateConstant(-value));
			}
			else // if (value == 0)
			{
				Debug.Assert(value == 0);
				context.SetNop();
			}
		}
	}
}
