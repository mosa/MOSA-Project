// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using System.Diagnostics;
using Mosa.Compiler.Framework;

namespace Mosa.Compiler.x64.Transforms.Optimizations.Manual.Stack;

/// <summary>
/// Add32
/// </summary>
[Transform("x64.Optimizations.Manual.Stack")]
public sealed class Add32 : BaseTransform
{
	public Add32() : base(X64.Add32, TransformType.Manual | TransformType.Optimization)
	{
	}

	public override bool Match(Context context, Transform transform)
	{
		if (!context.Operand1.IsPhysicalRegister)
			return false;

		if (context.Operand1.Register != CPURegister.RSP)
			return false;

		if (!context.Operand2.IsConstant)
			return false;

		var next = context.Node.NextNonEmpty;

		if (next == null)
			return false;

		if (next.Instruction != X64.Sub32)
			return false;

		if (context.Operand1.Register != CPURegister.RSP)
			return false;

		if (!next.Operand2.IsConstant)
			return false;

		return true;
	}

	public override void Transform(Context context, Transform transform)
	{
		var next = context.Node.NextNonEmpty;

		var value1 = context.Operand2.ConstantSigned32;
		var value2 = next.Operand2.ConstantSigned32;

		var value = value1 - value2;

		next.SetNop();

		if (value > 0)
		{
			context.SetInstruction(X64.Add32, context.Result, context.Operand1, Operand.CreateConstant(value));
		}
		else if (value < 0)
		{
			context.SetInstruction(X64.Sub32, context.Result, context.Operand1, Operand.CreateConstant(-value));
		}
		else // if (value == 0)
		{
			Debug.Assert(value == 0);
			context.SetNop();
		}
	}
}
