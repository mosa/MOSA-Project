// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using Mosa.Compiler.Framework;

namespace Mosa.Compiler.x64.Transforms.Optimizations.Auto.Lea;

public sealed class Lea32Shift32 : BaseTransform
{
	public Lea32Shift32() : base(X64.Lea32, TransformType.Auto | TransformType.Optimization)
	{
	}

	public override bool Match(Context context, Transform transform)
	{
		if (!context.Operand2.IsVirtualRegister)
			return false;

		if (!context.Operand3.IsConstantOne)
			return false;

		if (!context.Operand2.IsDefinedOnce)
			return false;

		if (context.Operand2.Definitions[0].Instruction != X64.Shl32)
			return false;

		if (!IsVirtualRegister(context.Operand2.Definitions[0].Operand1))
			return false;

		if (!IsUnsignedBetween32(context.Operand2.Definitions[0].Operand2, 1, 3))
			return false;

		return true;
	}

	public override void Transform(Context context, Transform transform)
	{
		var result = context.Result;

		var t1 = context.Operand1;
		var t2 = context.Operand2.Definitions[0].Operand1;
		var t3 = context.Operand2.Definitions[0].Operand2;
		var t4 = context.Operand4;

		var e1 = Operand.CreateConstant(ShiftLeft32(1, To32(t3)));

		context.SetInstruction(X64.Lea32, result, t1, t2, e1, t4);
	}
}
